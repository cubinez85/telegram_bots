# bot.py
import logging
import re
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from db import (
    init_db,
    create_or_update_user,
    add_event,
    get_events_for_next_week,
    get_events_for_current_week,
    delete_event
)
from parser import parse_news, get_events_for_week
from google_calendar import get_calendar_service, create_calendar_event, delete_calendar_event

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
init_db()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    create_or_update_user(user_id)
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    text_lower = text.lower()
    user_id = update.effective_user.id
    create_or_update_user(user_id)

    # === –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏ –∏–ª–∏ —Å–ø–µ–∫—Ç–∞–∫–ª—è ===
    if ("—É–¥–∞–ª–∏—Ç—å" in text_lower) and ("—Ä–µ–ø–µ—Ç–∏—Ü" in text_lower or "—Å–ø–µ–∫—Ç–∞–∫–ª" in text_lower):
        title_match = re.search(r'[¬´"‚Äò](.+?)[¬ª"‚Äô]', text)
        if not title_match:
            await update.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ–∫—Ç–∞–∫–ª—è/—Ä–µ–ø–µ—Ç–∏—Ü–∏–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: —É–¥–∞–ª–∏—Ç—å —Å–ø–µ–∫—Ç–∞–∫–ª—å ¬´–ö–∞—Ä–º–µ–Ω¬ª 15.10"
            )
            return

        title = title_match.group(1).strip()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã (—Ü–∏—Ñ—Ä—ã –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞)
        date_match = re.search(r"(\d{1,2})[ .\-](\d{1,2})(?:[ .\-](\d{4}))?", text)
        if date_match:
            day = int(date_match.group(1))
            month = int(date_match.group(2))
            year = int(date_match.group(3)) if date_match.group(3) else datetime.now().year
        else:
            month_map = {
                '—è–Ω–≤–∞—Ä': 1, '—Ñ–µ–≤—Ä–∞–ª': 2, '–º–∞—Ä—Ç': 3, '–∞–ø—Ä–µ–ª': 4, '–º–∞–π': 5, '–∏—é–Ω': 6,
                '–∏—é–ª': 7, '–∞–≤–≥—É—Å—Ç': 8, '—Å–µ–Ω—Ç—è–±—Ä': 9, '–æ–∫—Ç—è–±—Ä': 10, '–Ω–æ—è–±—Ä': 11, '–¥–µ–∫–∞–±—Ä': 12
            }
            date_match_text = re.search(r"(\d{1,2})\s+([–∞-—è—ë]+)", text, re.IGNORECASE)
            if date_match_text:
                day = int(date_match_text.group(1))
                month_word = date_match_text.group(2).lower()
                month = None
                for key, val in month_map.items():
                    if month_word.startswith(key):
                        month = val
                        break
                if month is None:
                    await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–µ—Å—è—Ü. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ 15.10 –∏–ª–∏ 15 –æ–∫—Ç—è–±—Ä—è.")
                    return
                year = datetime.now().year
            else:
                await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.10 –∏–ª–∏ 15 –æ–∫—Ç—è–±—Ä—è)")
                return

        try:
            event_date = datetime(year, month, day).date()
            date_iso = event_date.strftime("%Y-%m-%d")
        except ValueError:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞.")
            return

        cal_event_id = delete_event(user_id, title, date_iso)

        if not cal_event_id:
            await update.message.reply_text(
                f"–°–æ–±—ã—Ç–∏–µ ¬´{title}¬ª –Ω–∞ {date_iso} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."
            )
            return

        try:
            service = get_calendar_service()
            delete_calendar_event(service, cal_event_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ Google Calendar: {e}")
            await update.message.reply_text(
                f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ Google Calendar: {e}"
            )
            return

        await update.message.reply_text(
            f"üóëÔ∏è –°–æ–±—ã—Ç–∏–µ ¬´{title}¬ª –Ω–∞ {date_iso} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ Google Calendar."
        )
        return

    # === –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏ –∏–ª–∏ —Å–ø–µ–∫—Ç–∞–∫–ª—è –ø–æ —à–∞–±–ª–æ–Ω—É ===
    if "–¥–æ–±–∞–≤—å" in text_lower and ("—Ä–µ–ø–µ—Ç–∏—Ü" in text_lower or "—Å–ø–µ–∫—Ç–∞–∫–ª" in text_lower):
        title_match = re.search(r'[¬´"‚Äò](.+?)[¬ª"‚Äô]', text)
        if not title_match:
            await update.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ–∫—Ç–∞–∫–ª—è –≤ –∫–∞–≤—ã—á–∫–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–í –≥–æ—Å—Ç—è—Ö —É –æ–ø–µ—Ä–Ω–æ–π —Å–∫–∞–∑–∫–∏¬ª"
            )
            return

        title = title_match.group(1).strip()

        # === –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "15 –æ–∫—Ç—è–±—Ä—è" ===
        date_match = re.search(r"(\d{1,2})[ .\-](\d{1,2})(?:[ .\-](\d{4}))?", text)
        if date_match:
            day = int(date_match.group(1))
            month = int(date_match.group(2))
            year = int(date_match.group(3)) if date_match.group(3) else datetime.now().year
        else:
            month_map = {
                '—è–Ω–≤–∞—Ä': 1, '—Ñ–µ–≤—Ä–∞–ª': 2, '–º–∞—Ä—Ç': 3, '–∞–ø—Ä–µ–ª': 4, '–º–∞–π': 5, '–∏—é–Ω': 6,
                '–∏—é–ª': 7, '–∞–≤–≥—É—Å—Ç': 8, '—Å–µ–Ω—Ç—è–±—Ä': 9, '–æ–∫—Ç—è–±—Ä': 10, '–Ω–æ—è–±—Ä': 11, '–¥–µ–∫–∞–±—Ä': 12
            }
            date_match_text = re.search(r"(\d{1,2})\s+([–∞-—è—ë]+)", text, re.IGNORECASE)
            if date_match_text:
                day = int(date_match_text.group(1))
                month_word = date_match_text.group(2).lower()
                month = None
                for key, val in month_map.items():
                    if month_word.startswith(key):
                        month = val
                        break
                if month is None:
                    await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–µ—Å—è—Ü. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ 15.10 –∏–ª–∏ 15 –æ–∫—Ç—è–±—Ä—è.")
                    return
                year = datetime.now().year
            else:
                await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.10 –∏–ª–∏ 15 –æ–∫—Ç—è–±—Ä—è)")
                return

        try:
            event_date = datetime(year, month, day).date()
            date_iso = event_date.strftime("%Y-%m-%d")
        except ValueError:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞.")
            return

        # === –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ "–¥–æ" –≤ —É–∫–∞–∑–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ ===
        time_match = re.search(
            r"(\d{1,2}:\d{2})\s*(?:[-‚Äì]|\b–¥–æ\b)\s*(\d{1,2}:\d{2})",
            text,
            re.IGNORECASE
        )
        if time_match:
            start_time = time_match.group(1)
            end_time = time_match.group(2)
        else:
            time_match = re.search(r"(\d{1,2}:\d{2})", text)
            if not time_match:
                await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:00‚Äì15:30 –∏–ª–∏ 14:00 –¥–æ 15:30)")
                return
            start_time = time_match.group(1)
            duration = 1.5 if "—Ä–µ–ø–µ—Ç–∏—Ü" in text_lower else 2.5
            try:
                start_obj = datetime.strptime(start_time, "%H:%M")
                end_obj = start_obj + timedelta(hours=duration)
                end_time = end_obj.strftime("%H:%M")
            except:
                end_time = "13:30" if "—Ä–µ–ø–µ—Ç–∏—Ü" in text_lower else "21:30"

        hall = "–°—Ç—Ä–∞–≤–∏–Ω—Å–∫–∏–π"
        if "—à–∞—Ö–æ–≤—Å–∫" in text_lower:
            hall = "–®–∞—Ö–æ–≤—Å–∫–æ–π"
        elif "–ø–æ–∫—Ä–æ–≤—Å–∫" in text_lower:
            hall = "–ü–æ–∫—Ä–æ–≤—Å–∫–∏–π"

        event_type = "—Ä–µ–ø–µ—Ç–∏—Ü–∏—è" if "—Ä–µ–ø–µ—Ç–∏—Ü" in text_lower else "—Å–ø–µ–∫—Ç–∞–∫–ª—å"

        try:
            service = get_calendar_service()
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é: {e}")
            return

        start_dt_iso = f"{date_iso}T{start_time}:00"
        end_dt_iso = f"{date_iso}T{end_time}:00"
        summary = f"{event_type.capitalize()} ¬´{title}¬ª"
        location = f"–ó–∞–ª {hall}"
        description = "—É—á–∞—Å—Ç–∏–µ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–µ ‚Äî —Ñ–∞–≥–æ—Ç"

        try:
            cal_id = create_calendar_event(service, summary, start_dt_iso, end_dt_iso, location, description)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Google Calendar: {e}")
            cal_id = ""

        add_event(user_id, {
            "event_name": title,
            "date": date_iso,
            "start_time": start_time,
            "end_time": end_time,
            "hall": hall,
            "event_type": event_type,
            "role": "—É—á–∞—Å—Ç–∏–µ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–µ ‚Äî —Ñ–∞–≥–æ—Ç",
            "calendar_event_id": cal_id
        })

        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {date_iso}, {start_time}‚Äì{end_time} ‚Äî {event_type} ¬´{title}¬ª –≤ –∑–∞–ª–µ {hall}.\n"
            "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∑–∞ 3 —á–∞—Å–∞."
        )
        return

    # === –ó–∞–ø—Ä–æ—Å: "–ö–æ–≥–¥–∞ —è —Ä–∞–±–æ—Ç–∞—é –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?" (–ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ) ===
    if "—ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ" in text_lower and ("—Ä–∞–±–æ—Ç–∞—é" in text_lower or "—Ä–∞—Å–ø–∏—Å–∞–Ω" in text_lower or "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ" in text_lower or "—á—Ç–æ —É –º–µ–Ω—è" in text_lower):
        today = datetime.now().date()
        start_of_week = today - timedelta(days=today.weekday())
        end_of_week = start_of_week + timedelta(days=6)

        local_events = get_events_for_current_week(user_id)
        if local_events:
            reply = "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n"
            for ev in local_events:
                reply += f"- {ev['date']}, {ev['start']}‚Äì{ev['end']} ‚Äî {ev['type']} ¬´{ev['event']}¬ª –≤ –∑–∞–ª–µ {ev['hall']}.\n"
            await update.message.reply_text(reply)
        else:
            site_events = get_events_for_week(start_of_week, end_of_week)
            if site_events:
                context.user_data["pending_events"] = site_events
                reply = "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n"
                reply += "–ù–æ –Ω–∞ —Å–∞–π—Ç–µ ¬´–ì–µ–ª–∏–∫–æ–Ω-–æ–ø–µ—Ä–∞¬ª –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n"
                for ev in site_events:
                    reply += f"- {ev['date']}, {ev['start']}‚Äì{ev['end']} ‚Äî {ev['type']} ¬´{ev['event_name']}¬ª –≤ –∑–∞–ª–µ {ev['hall']}.\n"
                reply += "\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤—Å–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ? –ù–∞–ø–∏—à–∏—Ç–µ ¬´–¥–∞¬ª."
                await update.message.reply_text(reply)
            else:
                await update.message.reply_text("–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # === –ó–∞–ø—Ä–æ—Å: "–ö–∞–∫–∏–µ —Å–ø–µ–∫—Ç–∞–∫–ª–∏ –≤ —Ç–µ–∞—Ç—Ä–µ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?" (–æ–±—â–∞—è –∞—Ñ–∏—à–∞) ===
    if ("—Å–ø–µ–∫—Ç–∞–∫–ª" in text_lower or "–º–µ—Ä–æ–ø—Ä–∏—è—Ç" in text_lower or "–∞—Ñ–∏—à" in text_lower) and "—ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ" in text_lower:
        today = datetime.now().date()
        start_of_week = today - timedelta(days=today.weekday())
        end_of_week = start_of_week + timedelta(days=6)

        site_events = get_events_for_week(start_of_week, end_of_week)
        if site_events:
            reply = "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –≤ —Ç–µ–∞—Ç—Ä–µ ¬´–ì–µ–ª–∏–∫–æ–Ω-–æ–ø–µ—Ä–∞¬ª –ø—Ä–æ–π–¥—É—Ç —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n"
            for ev in site_events:
                reply += f"- {ev['date']}, {ev['start']}‚Äì{ev['end']} ‚Äî {ev['type']} ¬´{ev['event_name']}¬ª –≤ –∑–∞–ª–µ {ev['hall']}.\n"
            await update.message.reply_text(reply)
        else:
            await update.message.reply_text("–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —Ç–µ–∞—Ç—Ä–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.")
        return

    # === –ó–∞–ø—Ä–æ—Å: "–ö–∞–∫–∏–µ —Å–ø–µ–∫—Ç–∞–∫–ª–∏ –≤ —Ç–µ–∞—Ç—Ä–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ?" (–æ–±—â–∞—è –∞—Ñ–∏—à–∞) ===
    if ("—Å–ø–µ–∫—Ç–∞–∫–ª" in text_lower or "–º–µ—Ä–æ–ø—Ä–∏—è—Ç" in text_lower or "–∞—Ñ–∏—à" in text_lower) and ("—Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ" in text_lower or "—Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é" in text_lower):
        today = datetime.now().date()
        start_of_next_week = today + timedelta(days=(7 - today.weekday()))
        end_of_next_week = start_of_next_week + timedelta(days=6)

        site_events = get_events_for_week(start_of_next_week, end_of_next_week)
        if site_events:
            reply = "–ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ –≤ —Ç–µ–∞—Ç—Ä–µ ¬´–ì–µ–ª–∏–∫–æ–Ω-–æ–ø–µ—Ä–∞¬ª –ø—Ä–æ–π–¥—É—Ç —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n"
            for ev in site_events:
                reply += f"- {ev['date']}, {ev['start']}‚Äì{ev['end']} ‚Äî {ev['type']} ¬´{ev['event_name']}¬ª –≤ –∑–∞–ª–µ {ev['hall']}.\n"
            await update.message.reply_text(reply)
        else:
            await update.message.reply_text("–ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —Ç–µ–∞—Ç—Ä–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.")
        return

    # === –ó–∞–ø—Ä–æ—Å: "–ß—Ç–æ —É –º–µ–Ω—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ?" (–ª–∏—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ) ===
    if "—Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ" in text_lower or ("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" in text_lower and "–Ω–µ–¥–µ–ª" in text_lower):
        today = datetime.now().date()
        start_of_next_week = today + timedelta(days=(7 - today.weekday()))
        end_of_next_week = start_of_next_week + timedelta(days=6)

        local_events = get_events_for_next_week(user_id)
        if local_events:
            reply = "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ:\n"
            for ev in local_events:
                reply += f"- {ev['date']}, {ev['start']}‚Äì{ev['end']} ‚Äî {ev['type']} ¬´{ev['event']}¬ª –≤ –∑–∞–ª–µ {ev['hall']}.\n"
            await update.message.reply_text(reply)
        else:
            site_events = get_events_for_week(start_of_next_week, end_of_next_week)
            if site_events:
                context.user_data["pending_events"] = site_events
                reply = "–ù–∞ —Å–∞–π—Ç–µ ¬´–ì–µ–ª–∏–∫–æ–Ω-–æ–ø–µ—Ä–∞¬ª –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n"
                for ev in site_events:
                    reply += f"- {ev['date']}, {ev['start']}‚Äì{ev['end']} ‚Äî {ev['type']} ¬´{ev['event_name']}¬ª –≤ –∑–∞–ª–µ {ev['hall']}.\n"
                reply += "\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤—Å–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ? –ù–∞–ø–∏—à–∏—Ç–µ ¬´–¥–∞¬ª."
                await update.message.reply_text(reply)
            else:
                await update.message.reply_text("–ù–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞ ===
    if text_lower in ["–¥–∞", "–¥–æ–±–∞–≤—å"]:
        pending = context.user_data.get("pending_events")
        if not pending:
            await update.message.reply_text("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
            return

        try:
            service = get_calendar_service()
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é: {e}")
            return

        for ev in pending:
            start_dt = f"{ev['date']}T{ev['start']}:00"
            end_dt = f"{ev['date']}T{ev['end']}:00"
            summary = f"{ev['type'].capitalize()} ¬´{ev['event_name']}¬ª"
            location = f"–ó–∞–ª {ev['hall']}"
            description = "—É—á–∞—Å—Ç–∏–µ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–µ ‚Äî —Ñ–∞–≥–æ—Ç"

            try:
                cal_id = create_calendar_event(service, summary, start_dt, end_dt, location, description)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ Google Calendar: {e}")
                cal_id = ""

            add_event(user_id, {
                "event_name": ev["event_name"],
                "date": ev["date"],
                "start_time": ev["start"],
                "end_time": ev["end"],
                "hall": ev["hall"],
                "event_type": ev["type"],
                "role": "—É—á–∞—Å—Ç–∏–µ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–µ ‚Äî —Ñ–∞–≥–æ—Ç",
                "calendar_event_id": cal_id
            })

        await update.message.reply_text(
            "‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ:\n" +
            "\n".join(
                f"- {ev['date']}, {ev['start']}‚Äì{ev['end']} ‚Äî {ev['type']} ¬´{ev['event_name']}¬ª –≤ –∑–∞–ª–µ {ev['hall']}."
                for ev in pending
            ) +
            "\n–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∑–∞ 3 —á–∞—Å–∞."
        )
        context.user_data.pop("pending_events", None)
        return

    # === –ù–æ–≤–æ—Å—Ç–∏ —Ç–µ–∞—Ç—Ä–∞ ===
    if any(kw in text_lower for kw in ["–Ω–æ–≤–æ—Å—Ç", "–Ω–æ–≤–æ", "–∞–∫—Ç—É–∞–ª—å–Ω", "—Å–≤–µ–∂"]) or "—Ç–µ–∞—Ç—Ä" in text_lower:
        news = parse_news()
        if news and "–û—à–∏–±–∫–∞" not in news[0]:
            news_text = "\n".join(f"{i+1}. {n}" for i, n in enumerate(news[:5]))
            await update.message.reply_text(f"–ù–æ–≤–æ—Å—Ç–∏ ¬´–ì–µ–ª–∏–∫–æ–Ω-–æ–ø–µ—Ä—ã¬ª:\n{news_text}")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # === –î–∏—Ä–∏–∂—ë—Ä ===
    if "–¥–∏—Ä–∏–∂" in text_lower:
        conductors = {
            "–≤ –≥–æ—Å—Ç—è—Ö —É –æ–ø–µ—Ä–Ω–æ–π —Å–∫–∞–∑–∫–∏": "–ú–∏—Ö–∞–∏–ª –ï–≥–∏–∞–∑–∞—Ä—å—è–Ω",
            "–º–∞–¥–¥–∞–ª–µ–Ω–∞": "–í–∞–ª–µ—Ä–∏–π –ö–∏—Ä—å—è–Ω–æ–≤",
            "–∫–∞—Ä–º–µ–Ω —â–µ–¥—Ä–∏–Ω": "–§–µ–ª–∏–∫—Å –ö–æ—Ä–æ–±–æ–≤",
            "–∫–∞—Ä–º–µ–Ω": "–§–µ–ª–∏–∫—Å –ö–æ—Ä–æ–±–æ–≤",
            "–∞–ª–µ–∫–æ": "–§–µ–ª–∏–∫—Å –ö–æ—Ä–æ–±–æ–≤",
            "–ø–∞—è—Ü—ã": "–¢–∏–º—É—Ä –ó–∞–Ω–≥–∏–µ–≤",
            "–±–æ—Ä–∏—Å –≥–æ–¥—É–Ω–æ–≤": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–µ–¥–µ—Ä–Ω–∏–∫–æ–≤",
            "—Å–∫–∞–∑–∫–∏ –≥–æ—Ñ–º–∞–Ω–∞": "–§–µ–ª–∏–∫—Å –ö–æ—Ä–æ–±–æ–≤",
            "—Ç—Ä–∞–≤–∏–∞—Ç–∞": "–§–µ–ª–∏–∫—Å –ö–æ—Ä–æ–±–æ–≤",
            "—Ç–æ—Å–∫–∞": "–§–µ–ª–∏–∫—Å –ö–æ—Ä–æ–±–æ–≤",
            "–∞–∏–¥–∞": "–§–µ–ª–∏–∫—Å –ö–æ—Ä–æ–±–æ–≤",
            "–∫–ª—é—á –Ω–∞ –º–æ—Å—Ç–æ–≤–æ–π": "–î–º–∏—Ç—Ä–∏–π –ë–µ—Ä—Ç–º–∞–Ω",
            "–∑–æ–ª—É—à–∫–∞": "–§–µ–ª–∏–∫—Å –ö–æ—Ä–æ–±–æ–≤",
            "–¥–∏–∞–ª–æ–≥–∏ –∫–∞—Ä–º–µ–ª–∏—Ç–æ–∫": "–§–µ–ª–∏–∫—Å –ö–æ—Ä–æ–±–æ–≤",
            "–º–µ–¥–∏—É–º": "–î–º–∏—Ç—Ä–∏–π –ë–µ—Ä—Ç–º–∞–Ω",
            "–∫–æ—Ñ–µ–π–Ω–∞—è –∫–∞–Ω—Ç–∞—Ç–∞": "–î–º–∏—Ç—Ä–∏–π –ë–µ—Ä—Ç–º–∞–Ω",
            "–ª–µ—Ç—É—á–∞—è –º—ã—à—å": "–§–µ–ª–∏–∫—Å –ö–æ—Ä–æ–±–æ–≤",
            "—Å–≤–µ—Ç –≤–∏—Ñ–ª–µ–µ–º—Å–∫–æ–π –∑–≤–µ–∑–¥—ã": "–î–º–∏—Ç—Ä–∏–π –ë–µ—Ä—Ç–º–∞–Ω",
            "–Ω–æ–≤—ã–π –≥–æ–¥ –≤ —Å–∫–∞–∑–æ—á–Ω–æ–º –≥–æ—Ä–æ–¥–µ": "–î–º–∏—Ç—Ä–∏–π –ë–µ—Ä—Ç–º–∞–Ω"
        }

        query = text_lower
        for word in ["—Å–ø–µ–∫—Ç–∞–∫–ª—å", "—Ä–µ–ø–µ—Ç–∏—Ü", "–¥–∏—Ä–∏–∂", "–∫—Ç–æ", "¬´", "¬ª", '"', "‚Äò", "‚Äô"]:
            query = query.replace(word, "")
        query = query.strip()

        found = None
        for title, conductor in conductors.items():
            if title in query:
                found = (title, conductor)
                break

        if found:
            title, conductor = found
            await update.message.reply_text(f"–î–∏—Ä–∏–∂—ë—Ä–æ–º —Å–ø–µ–∫—Ç–∞–∫–ª—è ¬´{title.title()}¬ª —è–≤–ª—è–µ—Ç—Å—è {conductor}.")
        else:
            await update.message.reply_text(
                "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ–∫—Ç–∞–∫–ª—è. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Äî –ö—Ç–æ –¥–∏—Ä–∏–∂—ë—Ä ¬´–í –≥–æ—Å—Ç—è—Ö —É –æ–ø–µ—Ä–Ω–æ–π —Å–∫–∞–∑–∫–∏¬ª?\n"
                "‚Äî –ö—Ç–æ –¥–∏—Ä–∏–∂—ë—Ä ¬´–ú–∞–¥–¥–∞–ª–µ–Ω—ã¬ª?"
            )
        return

    # === –£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å ===
    if any(kw in text_lower for kw in ["–∫–æ–≥–¥–∞", "–≤–æ —Å–∫–æ–ª—å–∫–æ", "–∫–∞–∫–æ–π –∑–∞–ª", "—á—Ç–æ —Å–µ–≥–æ–¥–Ω—è", "—Ä–µ–ø–µ—Ç–∏—Ü", "—Å–ø–µ–∫—Ç–∞–∫–ª"]):
        await update.message.reply_text(
            "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: –≤–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ? –ö–∞–∫–æ–π —Å–ø–µ–∫—Ç–∞–∫–ª—å/—Ä–µ–ø–µ—Ç–∏—Ü–∏—è? –í –∫–∞–∫–æ–º –∑–∞–ª–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç: –°—Ç—Ä–∞–≤–∏–Ω—Å–∫–∏–π –∏–ª–∏ –®–∞—Ö–æ–≤—Å–∫–æ–π?"
        )
        return

    # === –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ===
    await update.message.reply_text(
        "–Ø –ø–æ–º–æ–≥–∞—é —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∏—Ä–∏–∂—ë—Ä–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Äî –ö–æ–≥–¥–∞ —è —Ä–∞–±–æ—Ç–∞—é –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?\n"
        "‚Äî –ö–∞–∫–∏–µ —Å–ø–µ–∫—Ç–∞–∫–ª–∏ –≤ —Ç–µ–∞—Ç—Ä–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ?\n"
        "‚Äî –î–æ–±–∞–≤—å —Ä–µ–ø–µ—Ç–∏—Ü–∏—é ¬´–í –≥–æ—Å—Ç—è—Ö —É –æ–ø–µ—Ä–Ω–æ–π —Å–∫–∞–∑–∫–∏¬ª 11.10 —Å 12:00 –¥–æ 13:00 –≤ –°—Ç—Ä–∞–≤–∏–Ω—Å–∫–æ–º\n"
        "‚Äî –î–æ–±–∞–≤—å —Å–ø–µ–∫—Ç–∞–∫–ª—å ¬´–ö–∞—Ä–º–µ–Ω¬ª 15 –æ–∫—Ç—è–±—Ä—è 19:00‚Äì21:30 –≤ –®–∞—Ö–æ–≤—Å–∫–æ–º\n"
        "‚Äî –ï—Å—Ç—å –ª–∏ –Ω–æ–≤–æ—Å—Ç–∏?\n"
        "‚Äî –ö—Ç–æ –¥–∏—Ä–∏–∂—ë—Ä ¬´–ö–∞—Ä–º–µ–Ω¬ª?\n"
        "‚Äî –£–¥–∞–ª–∏—Ç—å —Å–ø–µ–∫—Ç–∞–∫–ª—å ¬´–ö–∞—Ä–º–µ–Ω¬ª 15.10"
    )

def main():
    TOKEN = "12345*****"  # ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
